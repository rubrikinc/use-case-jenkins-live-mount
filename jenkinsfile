#!groovy
node{
    currentBuild.result = "SUCCESS"

    try {
       stage('Checkout'){
          checkout scm
       }

      stage('SQL Live Mount'){
        env.NODE_ENV = 'Dev'

        print "DEBUG: parameter rubrik_ip = ${RUBRIK_IP}"
        print "DEBUG: parameter SQL_HOST = ${SQL_HOST}"
        print "DEBUG: parameter SQL_Instance = ${SQL_INSTANCE}"
        print "DEBUG: parameter SQL_DB_NAME = ${SQL_DB_NAME}"
        print "DEBUG: parameter SQL Suffix = ${SQL_MOUNT_PREFIX}"

        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'RubrikClusterLogon', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {

          print "Mounting most recent snapshot..."
          sh 'python -u sql_live_mount.py -ip "$RUBRIK_IP" -u "$USERNAME" -p "$PASSWORD" -s "$SQL_HOST" -i "$SQL_INSTANCE" -d "$SQL_DB_NAME" -x "$SQL_MOUNT_PREFIX"'
        }
      }

      stage('Test MSSQL Connection') {
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SQLCreds', usernameVariable: 'USERNAMESQL', passwordVariable: 'PASSWORDSQL']]) {
              print "Testing Connection to MSSQL"
              sh 'python -u test_mssql_connection.py -s "$SQL_HOST" -i "$SQL_INSTANCE" -d "$SQL_DB_NAME" -x "$SQL_MOUNT_PREFIX" -u "$USERNAMESQL" -p "$PASSWORDSQL"'
          }
      }

      stage('Build'){
      print "Build HTTPD Config"
          node('ad-apache-demo') {
              print "Environment Build Started for : ${env.NODE_ENV}"
              withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SQLCreds', usernameVariable: 'USERNAMESQL', passwordVariable: 'PASSWORDSQL']]) {
                  sh '''
                        #!/bin/sh
                        yum install epel-release -y
                        yum install python-pip -y
                        setsebool -P httpd_can_network_connect=1
                        yum install php php-fpm wget php-devel -y
                        yum install --enablerepo=extras php-mssql -y
                        yum groupinstall "Development Tools" -y
                        curl https://packages.microsoft.com/config/rhel/7/prod.repo > /etc/yum.repos.d/mssql-release.repo
                        yum clean all
                        yum update -y
                        ACCEPT_EULA=Y yum install -y msodbcsql mssql-tools unixODBC-devel 
                        HOSTNAME=$(cat /etc/hostname)
                        HTTPDCHECK=$(yum list installed | grep -q -i httpd || exit 0)
                        if [ $HOSTNAME == \\"${vmname}\\" ]; then
                          sethostname=$(hostnamectl set-hostname ad-apache-demo)
                        else
                          printf '%s\n' "Hostname already set"
                        fi
                        printf '%s\n' "Updating Packages"
                        yum update -y
                        printf '%s\n' "Checking Apache..."
                        if [ -z \"$HTTPDCHECK\" ]; then
                          printf '%s\n' "$PACKAGE is not installed. Installing Apache(httpd)..."
                          yum install httpd -y
                          firewall-cmd --zone=public --add-port=80/tcp --permanent
                          firewall-cmd --zone=public --add-port=443/tcp --permanent
                          firewall-cmd --reload
                        else
                          printf '%s\n' "Package $PACKAGE Already Installed"
                        fi
                        SQL_DB=$SQL_DB_NAME-$SQL_MOUNT_PREFIX
                        SQL_SERVER="$SQL_HOST\\$SQL_INSTANCE"
                        
                        wget -P /var/www/html/ https://raw.githubusercontent.com/Draper1/test-public/master/data.php
                        sed -i "s/RUBRIK_LIVEMOUNT_DB/$SQL_DB/g" /var/www/html/data.php
                        sed -i "s/RUBRIK_SERVER/$SQL_SERVER/g" /var/www/html/data.php
                        sed -i "s/SQL_USER/$USERNAMESQL/g" /var/www/html/data.php
                        sed -i "s/SQL_PASSWORD/$PASSWORDSQL/g" /var/www/html/data.php
                    '''
              }
          }
      }

      stage('Sanitise MSSQL'){
        print "Sanitising Data from Tables"
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SQLCreds', usernameVariable: 'USERNAMESQL', passwordVariable: 'PASSWORDSQL']]) {
              print "Testing Connection to MSSQL"
              sh 'python -u mssql_sanitise.py -s "$SQL_HOST" -i "$SQL_INSTANCE" -d "$SQL_DB_NAME" -x "$SQL_MOUNT_PREFIX" -u "$USERNAMESQL" -p "$PASSWORDSQL"'
          }
      }

    }
    catch (err) {

        currentBuild.result = "FAILURE"
        throw err

    }
}
